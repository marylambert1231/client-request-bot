import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import filters
from telegram.ext import ContextTypes
from telegram.ext import ConversationHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

NAME, NUMBER = range(2) 

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    user_id = update.message.from_user.id
    keyboard = [
        ["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üïê –ì—Ä–∞—Ñ–∏–∫"],
        ["‚ÑπÔ∏è –û –Ω–∞—Å", "üìç –ê–¥—Ä–µ—Å"]
        ]
    if user_id == ADMIN_ID:
        keyboard.append(["üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏", " üì§ –ó–∞—è–≤–∫–∏"])
    reply_markup = ReplyKeyboardMarkup (keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.first_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)


async def adress(update: Update, context):
    await update.message.reply_text("–ú—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É —É–ª. –ö—Ä–∞—Å–æ—Ç—ã, –¥. 1")

async def worktime(update: Update, context):
    await update.message.reply_text("–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 20:00")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –û –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã ‚ú®\n"
        "\n"
        "–ú—ã —Å–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–æ—Ç—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–∑–µ! üíá‚Äç‚ôÄÔ∏èüíÖüíÑ\n"
        "\n"
        "üîπ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º\n"
        "üîπ –¢–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞\n"
        "üîπ –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
        "üîπ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n"
        "\n"
        "–î–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –∫—Ä–∞—Å–æ—Ç—É –Ω–∞–º ‚Äî –∏ –±—É–¥—å—Ç–µ –Ω–µ–æ—Ç—Ä–∞–∑–∏–º—ã! üíñ\n"
        "\n"
        "–ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ! üè©"
    )

async def appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_data:
        await update.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è")
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–ö–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—Å—è?",
            reply_markup=ReplyKeyboardRemove(),
            )
        return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data['name'] = name
    await update.message.reply_text(
        f"{name}, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )
    return NUMBER

async def get_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    number = update.message.text
    user_data[user_id] = {
        'name' : context.user_data['name'],
        'number' : number
    }
    context.user_data.pop('name', None)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    return ConversationHandler.END

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        if not user_data:
            await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏")
        else:
            message = "–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ \n"
            for uid, data in user_data.items():
                message += f"ID: {uid}, –ò–º—è: {data['name']}, –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['number']} \n"
            await update.message.reply_text(message)
    else:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

async def clear_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id == ADMIN_ID:
        user_data.clear()
        await update.message.reply_text("–í—Å–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã üßπ")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Cancel")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("appointment", appointment),
            MessageHandler(filters.Regex(r'^üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è$'), appointment)
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_number)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r'^‚ÑπÔ∏è –û –Ω–∞—Å$'), info))
    app.add_handler(MessageHandler(filters.Regex(r'^üìç –ê–¥—Ä–µ—Å$'), adress))
    app.add_handler(MessageHandler(filters.Regex(r'^üïê –ì—Ä–∞—Ñ–∏–∫$'), worktime))
    app.add_handler(MessageHandler(filters.Regex(r'^üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏$'), clear_users))
    app.add_handler(MessageHandler(filters.Regex(r'^üì§ –ó–∞—è–≤–∫–∏$'), admin))
    app.add_handler(conv_handler)

    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!!")
    app.run_polling()

if __name__ == "__main__":
    main()
